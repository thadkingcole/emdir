{"version":3,"sources":["components/SearchBar/index.js","components/Top/index.js","utils/API.js","components/Emdir/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","InputGroup","FormControl","placeholder","aria-label","aria-describedby","DropdownButton","as","Append","variant","title","id","Dropdown","Item","href","Top","Jumbotron","fluid","Container","axios","get","Emdir","state","users","API","then","res","console","log","data","results","setState","catch","err","Table","striped","bordered","hover","size","this","map","rando","src","picture","large","alt","name","last","first","phone","cell","email","location","city","dob","age","gender","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+NA8BeA,MAxBf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,uBACZC,aAAW,uBACXC,mBAAiB,iBAGnB,kBAACC,EAAA,EAAD,CACEC,GAAIN,IAAWO,OACfC,QAAQ,oBACRC,MAAM,aACNC,GAAG,sBAEH,kBAACC,EAAA,EAASC,KAAV,CAAeC,KAAK,KAApB,QACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,KAAK,KAApB,YACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,KAAK,KAApB,OACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,KAAK,KAApB,aCROC,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kDACA,kBAAC,EAAD,S,yDCRO,EACH,WACR,OAAOC,IAAMC,IAAI,kDC6DNC,E,4MA5DbC,MAAQ,CACNC,MAAO,I,kEAGY,IAAD,OAClBC,IACGC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,KAAKC,SACrB,EAAKC,SAAS,CAAER,MAAOG,EAAIG,KAAKC,aAEjCE,OAAM,SAACC,GAAD,OAASN,QAAQC,IAAIK,Q,+BAI9B,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjC,+BACE,4BACE,6BACA,oCACA,qCACA,qCACA,wCACA,mCACA,wCAGJ,+BACGC,KAAKjB,MAAMC,MAAMiB,KAAI,SAACC,GACrB,OACE,4BAEE,4BACE,yBAAKC,IAAKD,EAAME,QAAQC,MAAOC,IAAKJ,EAAMK,KAAKC,QAGjD,4BAAKN,EAAMK,KAAKE,MAAQ,IAAMP,EAAMK,KAAKC,MAEzC,kCACMN,EAAMQ,MACV,6BAFF,MAGMR,EAAMS,MAGZ,4BAAKT,EAAMU,OAEX,4BAAKV,EAAMW,SAASC,KAAO,KAAOZ,EAAMW,SAAS9B,OAEjD,4BAAKmB,EAAMa,IAAIC,KAEf,4BAAKd,EAAMe,kB,GAnDPC,aCcLC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACxC,EAAA,EAAD,KACE,kBAAC,EAAD,SCAYyC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.9029e8c4.chunk.js","sourcesContent":["import React from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nfunction SearchBar() {\n  return (\n    <InputGroup>\n      <FormControl\n        placeholder=\"Search the directory\"\n        aria-label=\"Search the directory\"\n        aria-describedby=\"basic-addon2\"\n      />\n\n      <DropdownButton\n        as={InputGroup.Append}\n        variant=\"outline-secondary\"\n        title=\"Search For\"\n        id=\"emdir-field-select\"\n      >\n        <Dropdown.Item href=\"#\">Name</Dropdown.Item>\n        <Dropdown.Item href=\"#\">Location</Dropdown.Item>\n        <Dropdown.Item href=\"#\">Age</Dropdown.Item>\n        <Dropdown.Item href=\"#\">Gender</Dropdown.Item>\n      </DropdownButton>\n    </InputGroup>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport SearchBar from \"../SearchBar\";\n\nfunction Top() {\n  return (\n    <Jumbotron fluid>\n      <Container>\n        <h1>EMployee DIRectory</h1>\n        <SearchBar />\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Top;\n","import axios from \"axios\";\n\nexport default {\n  getUsers: () => {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n  }\n}","import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport API from \"../../utils/API\";\n\nclass Emdir extends Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        console.log(res.data.results);\n        this.setState({ users: res.data.results });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>{/* blank cell */}</th>\n            <th>Name</th>\n            <th>Phone</th>\n            <th>Email</th>\n            <th>Location</th>\n            <th>Age</th>\n            <th>Gender</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.users.map((rando) => {\n            return (\n              <tr>\n                {/* picture */}\n                <td>\n                  <img src={rando.picture.large} alt={rando.name.last} />\n                </td>\n                {/* name */}\n                <td>{rando.name.first + \" \" + rando.name.last}</td>\n                {/* phone number(s) */}\n                <td>\n                  p: {rando.phone}\n                  <br />\n                  c: {rando.cell}\n                </td>\n                {/* email */}\n                <td>{rando.email}</td>\n                {/* location */}\n                <td>{rando.location.city + \", \" + rando.location.state}</td>\n                {/* age */}\n                <td>{rando.dob.age}</td>\n                {/* gender */}\n                <td>{rando.gender}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default Emdir;\n","import React from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\nimport Top from \"./components/Top\";\nimport Container from \"react-bootstrap/Container\";\nimport Emdir from \"./components/Emdir\";\n\nfunction App() {\n  return (\n    <div>\n      <Top />\n      <Container>\n        <Emdir />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}