{"version":3,"sources":["components/SearchBar/index.js","components/Top/index.js","utils/API.js","components/Emdir/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","handleInputChange","event","target","name","value","setState","searchForName","console","log","searchForLocation","searchForBirthday","searchForPronoun","InputGroup","FormControl","placeholder","aria-label","aria-describedby","as","onChange","this","type","DropdownButton","Append","variant","title","id","Dropdown","Item","onSelect","Component","Top","Jumbotron","fluid","Container","className","icon","faAddressBook","axios","get","Emdir","users","API","then","res","data","results","catch","err","Table","striped","bordered","hover","responsive","size","map","rando","key","src","picture","large","alt","last","first","faPhoneSquareAlt","phone","faMobileAlt","cell","faEnvelopeOpenText","email","location","city","Date","dob","date","toLocaleDateString","gender","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b207f284.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nclass SearchBar extends Component {\n  state = {\n    searchTerm: \"\",\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  searchForName = () => {\n    console.log(\"searching for name \", this.state.searchTerm);\n  };\n\n  searchForLocation = () => {\n    console.log(\"searching for location \", this.state.searchTerm);\n  };\n\n  searchForBirthday = () => {\n    console.log(\"searching for birthday \", this.state.searchTerm);\n  };\n\n  searchForPronoun = () => {\n    console.log(\"searching for pronoun \", this.state.searchTerm);\n  };\n\n  render() {\n    return (\n      <InputGroup>\n        <FormControl\n          placeholder=\"Search the directory\"\n          aria-label=\"Search the directory\"\n          aria-describedby=\"basic-addon2\"\n          as=\"input\"\n          onChange={this.handleInputChange}\n          name=\"searchTerm\"\n          value={this.state.searchTerm}\n          type=\"text\"\n        />\n\n        <DropdownButton\n          as={InputGroup.Append}\n          variant=\"outline-secondary\"\n          title=\"Search For\"\n          id=\"emdir-field-select\"\n        >\n          <Dropdown.Item onSelect={this.searchForName}>Name</Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForLocation}>\n            Location\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForBirthday}>\n            Birthday\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForPronoun}>\n            Pronouns\n          </Dropdown.Item>\n        </DropdownButton>\n      </InputGroup>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport SearchBar from \"../SearchBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAddressBook } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Top() {\n  return (\n    <Jumbotron fluid>\n      <Container>\n        <h1 className=\"display-4\">\n          <FontAwesomeIcon icon={faAddressBook} /> Employee Directory\n        </h1>\n        <SearchBar />\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Top;\n","import axios from \"axios\";\n\n// seed to be used by random user API\nconst seed = \"thadkingcole\";\n\nexport default {\n  getUsers: () => {\n    return axios.get(\n      `https://randomuser.me/api/?results=200&nat=us&seed=${seed}`\n    );\n  },\n};\n","import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport API from \"../../utils/API\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPhoneSquareAlt,\n  faMobileAlt,\n  faEnvelopeOpenText,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nclass Emdir extends Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        this.setState({ users: res.data.results });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <Table striped bordered hover responsive size=\"sm\">\n        <thead className=\"text-center\">\n          <tr>\n            <th>Name</th>\n            <th>Contact</th>\n            <th>Location</th>\n            <th>Birthday</th>\n            <th>Pronouns</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.users.map((rando) => {\n            return (\n              <tr key={rando.id.value}>\n                <td className=\"text-center\">\n                  <img src={rando.picture.large} alt={rando.name.last} />\n                  <br />\n                  {rando.name.first} {rando.name.last}\n                </td>\n                <td>\n                  <FontAwesomeIcon icon={faPhoneSquareAlt} size=\"2x\" />{\" \"}\n                  {rando.phone}\n                  <br />\n                  <FontAwesomeIcon icon={faMobileAlt} size=\"2x\" /> {rando.cell}\n                  <br />\n                  <FontAwesomeIcon icon={faEnvelopeOpenText} size=\"2x\" />{\" \"}\n                  {rando.email}\n                </td>\n                <td>\n                  {rando.location.city}, {rando.location.state}\n                </td>\n                <td>{new Date(rando.dob.date).toLocaleDateString()}</td>\n                <td>{rando.gender === \"male\" ? \"he/him\" : \"she/her\"}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default Emdir;\n","import React from \"react\";\nimport Top from \"./components/Top\";\nimport Container from \"react-bootstrap/Container\";\nimport Emdir from \"./components/Emdir\";\n\nfunction App() {\n  return (\n    <div>\n      <Top />\n      <Container>\n        <Emdir />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}