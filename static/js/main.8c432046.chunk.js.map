{"version":3,"sources":["components/SearchBar/index.js","components/Top/index.js","components/Emdir/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","handleInputChange","event","target","name","value","setState","searchForName","newUsers","props","users","filter","user","first","toLowerCase","includes","last","onUserSearch","searchForLocation","console","log","location","city","searchForBirthday","searchForPronoun","InputGroup","FormControl","placeholder","aria-label","aria-describedby","as","onChange","this","type","DropdownButton","Append","variant","title","id","Dropdown","Item","onSelect","Component","Top","Jumbotron","fluid","Container","className","icon","faAddressBook","Emdir","Table","striped","bordered","hover","responsive","size","map","rando","key","src","picture","large","alt","faPhoneSquareAlt","phone","faMobileAlt","cell","faEnvelopeOpenText","email","Date","dob","date","toLocaleDateString","gender","axios","get","App","API","then","res","data","results","catch","err","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uQAyFeA,E,4MAlFbC,MAAQ,CAAEC,WAAY,I,EAEtBC,kBAAoB,SAACC,GAAW,IAAD,EACLA,EAAMC,OAAtBC,EADqB,EACrBA,KAAMC,EADe,EACfA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,K,EAG1BE,cAAgB,WAGd,IAAMC,EAAW,EAAKC,MAAMC,MAAMC,QAAO,SAACC,GACxC,OACEA,EAAKR,KAAKS,MACPC,cACAC,SAAS,EAAKhB,MAAMC,WAAWc,gBAClCF,EAAKR,KAAKY,KACPF,cACAC,SAAS,EAAKhB,MAAMC,WAAWc,kBAGtC,EAAKL,MAAMQ,aAAaT,I,EAG1BU,kBAAoB,WAClBC,QAAQC,IAAI,0BAA2B,EAAKrB,MAAMC,YAClD,IAAMQ,EAAW,EAAKC,MAAMC,MAAMC,QAAO,SAACC,GACxC,OACEA,EAAKS,SAASC,KACXR,cACAC,SAAS,EAAKhB,MAAMC,WAAWc,gBAClCF,EAAKS,SAAStB,MACXe,cACAC,SAAS,EAAKhB,MAAMC,WAAWc,kBAGtC,EAAKL,MAAMQ,aAAaT,I,EAG1Be,kBAAoB,WAClBJ,QAAQC,IAAI,0BAA2B,EAAKrB,MAAMC,a,EAGpDwB,iBAAmB,WACjBL,QAAQC,IAAI,yBAA0B,EAAKrB,MAAMC,a,uDAIjD,OACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,uBACZC,aAAW,uBACXC,mBAAiB,eACjBC,GAAG,QACHC,SAAUC,KAAK/B,kBACfG,KAAK,aACLC,MAAO2B,KAAKjC,MAAMC,WAClBiC,KAAK,SAGP,kBAACC,EAAA,EAAD,CACEJ,GAAIL,IAAWU,OACfC,QAAQ,oBACRC,MAAM,aACNC,GAAG,sBAEH,kBAACC,EAAA,EAASC,KAAV,CAAeC,SAAUT,KAAKzB,eAA9B,QACA,kBAACgC,EAAA,EAASC,KAAV,CAAeC,SAAUT,KAAKd,mBAA9B,YAGA,kBAACqB,EAAA,EAASC,KAAV,CAAeC,SAAUT,KAAKT,mBAA9B,YAGA,kBAACgB,EAAA,EAASC,KAAV,CAAeC,SAAUT,KAAKR,kBAA9B,kB,GA1EckB,a,gBCcTC,MAbf,SAAalC,GACX,OACE,kBAACmC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAiBC,KAAMC,MADzB,uBAGA,kBAAC,EAAD,CAAWvC,MAAOD,EAAMC,MAAOO,aAAcR,EAAMQ,kB,QCsC5CiC,MA3Cf,SAAezC,GACX,OACE,kBAAC0C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAACC,KAAK,MAC5C,2BAAOT,UAAU,eACf,4BACE,oCACA,uCACA,wCACA,wCACA,0CAGJ,+BACGtC,EAAMC,MAAM+C,KAAI,SAACC,GAChB,OACE,wBAAIC,IAAKD,EAAMpB,GAAGjC,OAChB,wBAAI0C,UAAU,eACZ,yBAAKa,IAAKF,EAAMG,QAAQC,MAAOC,IAAKL,EAAMtD,KAAKY,OAC/C,6BACC0C,EAAMtD,KAAKS,MAHd,IAGsB6C,EAAMtD,KAAKY,MAEjC,4BACE,kBAAC,IAAD,CAAiBgC,KAAMgB,IAAkBR,KAAK,OAAQ,IACrDE,EAAMO,MACP,6BACA,kBAAC,IAAD,CAAiBjB,KAAMkB,IAAaV,KAAK,OAJ3C,IAIoDE,EAAMS,KACxD,6BACA,kBAAC,IAAD,CAAiBnB,KAAMoB,IAAoBZ,KAAK,OAAQ,IACvDE,EAAMW,OAET,4BACGX,EAAMrC,SAASC,KADlB,KAC0BoC,EAAMrC,SAAStB,OAEzC,4BAAK,IAAIuE,KAAKZ,EAAMa,IAAIC,MAAMC,sBAC9B,4BAAsB,SAAjBf,EAAMgB,OAAoB,SAAW,kB,iBCtC3C,EACH,WACR,OAAOC,IAAMC,IAAN,6DAJE,kBCgCEC,E,4MA5Bb9E,MAAQ,CACNW,MAAO,I,EAWTO,aAAe,SAACT,GACd,EAAKF,SAAS,CAAEI,MAAOF,K,kEATJ,IAAD,OAClBsE,IACGC,MAAK,SAACC,GACL,EAAK1E,SAAS,CAAEI,MAAOsE,EAAIC,KAAKC,aAEjCC,OAAM,SAACC,GAAD,OAASjE,QAAQC,IAAIgE,Q,+BAQ9B,OACE,6BACE,kBAAC,EAAD,CAAK1E,MAAOsB,KAAKjC,MAAMW,MAAOO,aAAce,KAAKf,eACjD,kBAAC6B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOpC,MAAOsB,KAAKjC,MAAMW,c,GAtBjBgC,aCME2C,QACW,cAA7BC,OAAOjE,SAASkE,UAEe,UAA7BD,OAAOjE,SAASkE,UAEhBD,OAAOjE,SAASkE,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLhF,QAAQgF,MAAMA,EAAMC,c","file":"static/js/main.8c432046.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nclass SearchBar extends Component {\n  state = { searchTerm: \"\" };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  searchForName = () => {\n    // console.log(\"searching for name \", this.state.searchTerm);\n    // filter name based on first name & last name\n    const newUsers = this.props.users.filter((user) => {\n      return (\n        user.name.first\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase()) ||\n        user.name.last\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase())\n      );\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  searchForLocation = () => {\n    console.log(\"searching for location \", this.state.searchTerm);\n    const newUsers = this.props.users.filter((user) => {\n      return (\n        user.location.city\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase()) ||\n        user.location.state\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase())\n      );\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  searchForBirthday = () => {\n    console.log(\"searching for birthday \", this.state.searchTerm);\n  };\n\n  searchForPronoun = () => {\n    console.log(\"searching for pronoun \", this.state.searchTerm);\n  };\n\n  render() {\n    return (\n      <InputGroup>\n        <FormControl\n          placeholder=\"Search the directory\"\n          aria-label=\"Search the directory\"\n          aria-describedby=\"basic-addon2\"\n          as=\"input\"\n          onChange={this.handleInputChange}\n          name=\"searchTerm\"\n          value={this.state.searchTerm}\n          type=\"text\"\n        />\n\n        <DropdownButton\n          as={InputGroup.Append}\n          variant=\"outline-secondary\"\n          title=\"Search For\"\n          id=\"emdir-field-select\"\n        >\n          <Dropdown.Item onSelect={this.searchForName}>Name</Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForLocation}>\n            Location\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForBirthday}>\n            Birthday\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForPronoun}>\n            Pronouns\n          </Dropdown.Item>\n        </DropdownButton>\n      </InputGroup>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport SearchBar from \"../SearchBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAddressBook } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Top(props) {\n  return (\n    <Jumbotron fluid>\n      <Container>\n        <h1 className=\"display-4\">\n          <FontAwesomeIcon icon={faAddressBook} /> Employee Directory\n        </h1>\n        <SearchBar users={props.users} onUserSearch={props.onUserSearch}/>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Top;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPhoneSquareAlt,\n  faMobileAlt,\n  faEnvelopeOpenText,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Emdir(props) {\n    return (\n      <Table striped bordered hover responsive size=\"sm\">\n        <thead className=\"text-center\">\n          <tr>\n            <th>Name</th>\n            <th>Contact</th>\n            <th>Location</th>\n            <th>Birthday</th>\n            <th>Pronouns</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.users.map((rando) => {\n            return (\n              <tr key={rando.id.value}>\n                <td className=\"text-center\">\n                  <img src={rando.picture.large} alt={rando.name.last} />\n                  <br />\n                  {rando.name.first} {rando.name.last}\n                </td>\n                <td>\n                  <FontAwesomeIcon icon={faPhoneSquareAlt} size=\"2x\" />{\" \"}\n                  {rando.phone}\n                  <br />\n                  <FontAwesomeIcon icon={faMobileAlt} size=\"2x\" /> {rando.cell}\n                  <br />\n                  <FontAwesomeIcon icon={faEnvelopeOpenText} size=\"2x\" />{\" \"}\n                  {rando.email}\n                </td>\n                <td>\n                  {rando.location.city}, {rando.location.state}\n                </td>\n                <td>{new Date(rando.dob.date).toLocaleDateString()}</td>\n                <td>{rando.gender === \"male\" ? \"he/him\" : \"she/her\"}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n}\n\nexport default Emdir;\n","import axios from \"axios\";\n\n// seed to be used by random user API\nconst seed = \"thadkingcole\";\n\nexport default {\n  getUsers: () => {\n    return axios.get(\n      `https://randomuser.me/api/?results=200&nat=us&seed=${seed}`\n    );\n  },\n};\n","import React, { Component } from \"react\";\nimport Top from \"./components/Top\";\nimport Container from \"react-bootstrap/Container\";\nimport Emdir from \"./components/Emdir\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        this.setState({ users: res.data.results });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  onUserSearch = (newUsers) => {\n    this.setState({ users: newUsers });\n  }\n\n  render() {\n    return (\n      <div>\n        <Top users={this.state.users} onUserSearch={this.onUserSearch} />\n        <Container>\n          <Emdir users={this.state.users} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}