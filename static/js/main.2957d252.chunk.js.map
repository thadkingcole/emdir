{"version":3,"sources":["components/SearchBar/index.js","components/Top/index.js","components/Emdir/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","isSearching","queries","handleInputChange","event","target","name","value","setState","searchForName","newUsers","props","userState","users","filter","user","first","toLowerCase","includes","last","onUserSearch","searchForLocation","location","city","searchForBirthday","Date","dob","date","toLocaleDateString","searchForPronouns","gender","clearSearch","console","log","allUsers","InputGroup","Prepend","this","Button","variant","onClick","FormControl","placeholder","aria-label","aria-describedby","as","onChange","type","DropdownButton","Append","title","id","Dropdown","Item","onSelect","Component","Top","Jumbotron","fluid","Container","className","icon","faAddressBook","Emdir","sortByName","sortedUsers","sort","a","b","onUserSort","tableHeaderClick","Table","striped","bordered","hover","responsive","size","map","rando","key","src","picture","large","alt","faPhoneSquareAlt","phone","faMobileAlt","cell","faEnvelopeOpenText","email","axios","get","App","API","then","res","data","results","length","catch","err","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2957d252.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Button from \"react-bootstrap/Button\";\n\nclass SearchBar extends Component {\n  state = {\n    searchTerm: \"\",\n    isSearching: false,\n    queries: [],\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  searchForName = () => {\n    this.setState({ isSearching: true });\n    // filter name based on first or last name\n    const newUsers = this.props.userState.users.filter((user) => {\n      return (\n        user.name.first\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase()) ||\n        user.name.last\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase())\n      );\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  searchForLocation = () => {\n    this.setState({ isSearching: true });\n    // filter location based on city or state\n    const newUsers = this.props.userState.users.filter((user) => {\n      return (\n        user.location.city\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase()) ||\n        user.location.state\n          .toLowerCase()\n          .includes(this.state.searchTerm.toLowerCase())\n      );\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  searchForBirthday = () => {\n    this.setState({ isSearching: true });\n    // filter birthday based on any portion of the date matching search term\n    const newUsers = this.props.userState.users.filter((user) => {\n      const birthday = new Date(user.dob.date).toLocaleDateString();\n      return birthday.includes(this.state.searchTerm);\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  searchForPronouns = () => {\n    this.setState({ isSearching: true });\n    // filter pronouns based on partial match he/him or she/her\n    const newUsers = this.props.userState.users.filter((user) => {\n      if (\n        this.state.searchTerm.toLowerCase().includes(\"she\") ||\n        this.state.searchTerm.toLowerCase().includes(\"her\")\n      ) {\n        return user.gender === \"female\";\n      }\n      if (\n        this.state.searchTerm.toLowerCase() === \"he\" || // she includes he\n        this.state.searchTerm.toLowerCase().includes(\"him\")\n      ) {\n        return user.gender === \"male\";\n      }\n      return false;\n    });\n    this.props.onUserSearch(newUsers);\n  };\n\n  clearSearch = () => {\n    console.log(\"you clicked clearSearch\");\n    this.props.onUserSearch(this.props.userState.allUsers);\n    this.setState({\n      isSearching: false,\n      searchTerm: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <InputGroup>\n        <InputGroup.Prepend>\n          {this.state.isSearching && (\n            <Button variant=\"outline-danger\" onClick={this.clearSearch}>\n              Clear Search\n            </Button>\n          )}\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder=\"Search the directory\"\n          aria-label=\"Search the directory\"\n          aria-describedby=\"basic-addon2\"\n          as=\"input\"\n          onChange={this.handleInputChange}\n          name=\"searchTerm\"\n          value={this.state.searchTerm}\n          type=\"text\"\n        />\n\n        <DropdownButton\n          as={InputGroup.Append}\n          variant=\"outline-primary\"\n          title=\"Search For\"\n          id=\"emdir-field-select\"\n        >\n          <Dropdown.Item onSelect={this.searchForName}>Name</Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForLocation}>\n            Location\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForBirthday}>\n            Birthday\n          </Dropdown.Item>\n          <Dropdown.Item onSelect={this.searchForPronouns}>\n            Pronouns\n          </Dropdown.Item>\n        </DropdownButton>\n      </InputGroup>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport SearchBar from \"../SearchBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAddressBook } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Top(props) {\n  return (\n    <Jumbotron fluid>\n      <Container>\n        <h1 className=\"display-4\">\n          <FontAwesomeIcon icon={faAddressBook} /> Employee Directory\n        </h1>\n        <SearchBar userState={props.userState} onUserSearch={props.onUserSearch}/>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Top;\n","import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPhoneSquareAlt,\n  faMobileAlt,\n  faEnvelopeOpenText,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nclass Emdir extends Component {\n  sortByName = () => {\n    const sortedUsers = this.props.users.sort((a, b) =>\n      a.name.last.toLowerCase() > b.name.last.toLowerCase() ? 1 : -1\n    );\n\n    this.props.onUserSort(sortedUsers);\n  };\n\n  tableHeaderClick = (event) => {\n    switch (event.target.id) {\n      case \"name\":\n        this.sortByName();\n        break;\n\n      case \"contact\":\n        console.log(\"you clicked contact\");\n        break;\n\n      case \"location\":\n        console.log(\"you clicked location\");\n        break;\n\n      case \"birthday\":\n        console.log(\"you clicked Birthday\");\n        break;\n\n      case \"pronouns\":\n        console.log(\"you clicked Pronouns\");\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <Table striped bordered hover responsive size=\"sm\">\n        <thead className=\"text-center\">\n          <tr onClick={this.tableHeaderClick}>\n            <th id=\"name\">Name</th>\n            <th id=\"contact\">Contact</th>\n            <th id=\"location\">Location</th>\n            <th id=\"birthday\">Birthday</th>\n            <th id=\"pronouns\">Pronouns</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.users.map((rando) => {\n            return (\n              <tr key={rando.id.value}>\n                <td className=\"text-center\">\n                  <img src={rando.picture.large} alt={rando.name.last} />\n                  <br />\n                  {rando.name.first} {rando.name.last}\n                </td>\n                <td>\n                  <FontAwesomeIcon icon={faPhoneSquareAlt} size=\"2x\" />{\" \"}\n                  {rando.phone}\n                  <br />\n                  <FontAwesomeIcon icon={faMobileAlt} size=\"2x\" /> {rando.cell}\n                  <br />\n                  <FontAwesomeIcon icon={faEnvelopeOpenText} size=\"2x\" />{\" \"}\n                  {rando.email}\n                </td>\n                <td>\n                  {rando.location.city}, {rando.location.state}\n                </td>\n                <td>{new Date(rando.dob.date).toLocaleDateString()}</td>\n                <td>{rando.gender === \"male\" ? \"he/him\" : \"she/her\"}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default Emdir;\n","import axios from \"axios\";\n\n// seed to be used by random user API\nconst seed = \"thadkingcole\";\n\nexport default {\n  getUsers: () => {\n    return axios.get(\n      `https://randomuser.me/api/?results=200&nat=us&seed=${seed}`\n    );\n  },\n};\n","import React, { Component } from \"react\";\nimport Top from \"./components/Top\";\nimport Container from \"react-bootstrap/Container\";\nimport Emdir from \"./components/Emdir\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n  state = {\n    users: [],\n    allUsers: [],\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        this.setState({ users: res.data.results });\n        if (!this.state.allUsers.length) {\n          this.setState({ allUsers: res.data.results });\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  onUserSearch = (newUsers) => {\n    this.setState({ users: newUsers });\n  };\n\n  onUserSort = (sortedUsers) => {\n    this.setState({ users: sortedUsers });\n  };\n\n  render() {\n    return (\n      <div>\n        <Top userState={this.state} onUserSearch={this.onUserSearch} />\n        <Container>\n          <Emdir users={this.state.users} onUserSort={this.onUserSort} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}